0 info it worked if it ends with ok
1 verbose cli [ '/Users/rbeaman/.nvm/versions/node/v6.0.0/bin/node',
1 verbose cli   '/Users/rbeaman/.nvm/versions/node/v6.0.0/bin/npm',
1 verbose cli   'publish' ]
2 info using npm@3.8.6
3 info using node@v6.0.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/rbeaman/projects/simple-iso-fetch',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package.tgz not in flight; packing
9 verbose correctMkdir /Users/rbeaman/.npm correctMkdir not in flight; initializing
10 info lifecycle simple-iso-fetch@2.0.5~prepublish: simple-iso-fetch@2.0.5
11 silly lifecycle simple-iso-fetch@2.0.5~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package.tgz',
12 verbose tar pack   '/Users/rbeaman/projects/simple-iso-fetch' ]
13 verbose tarball /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package.tgz
14 verbose folder /Users/rbeaman/projects/simple-iso-fetch
15 verbose addLocalTarball adding from inside cache /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package.tgz
16 verbose correctMkdir /Users/rbeaman/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd simple-iso-fetch@2.0.5
18 verbose afterAdd /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package/package.json not in flight; writing
19 verbose correctMkdir /Users/rbeaman/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package/package.json written
21 silly publish { name: 'simple-iso-fetch',
21 silly publish   version: '2.0.5',
21 silly publish   description: 'Isomorphic fetch with response parsing taken care of for you (based on headers) and response binding built in',
21 silly publish   main: 'index.js',
21 silly publish   keywords: [ 'isomorphic', 'universal', 'fetch', 'simple' ],
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/sirrodgepodge/simple-iso-fetch.git' },
21 silly publish   author: { name: 'sirRodgePodge' },
21 silly publish   license: 'MIT',
21 silly publish   bugs: { url: 'https://github.com/sirrodgepodge/simple-iso-fetch/issues' },
21 silly publish   homepage: 'https://github.com/sirrodgepodge/simple-iso-fetch#readme',
21 silly publish   dependencies:
21 silly publish    { 'form-data': '^1.0.0-rc4',
21 silly publish      'iso-path-join': '^1.0.2',
21 silly publish      'isomorphic-fetch': '^2.2.1',
21 silly publish      lodash: '^4.13.1',
21 silly publish      querystring: '^0.2.0' },
21 silly publish   readme: '# simple-iso-fetch\nThe new Fetch API is way better than XHR to work with for sure, but theres still a decent way to go to make it dead simple, I\'ve attempted to bridge that gap with this library :).\n\nI have also added the ability to bind functions to be run when API responses are received.  Functions can be bound to error responses, to success responses, and to all responses (both success and error).  See methods for this below \'Making Requests\' section.\n\n[![NPM][nodei-image]][nodei-url]\n\n# Making Requests\nTo make requests you just need to need to make an instance of SimpleIsoFetch and then can use your standard \'get\', \'put\', \'post\', \'del\', and \'patch\' methods.  If you\'re server-side you need to set the host because node-fetch can\'t determine the base route\n## \'Hello World\' Example\n```js\nimport SimpleIsoFetch from \'simple-iso-fetch\';\n\n// absolute routes are needed server-side until Node.js implements native fetch,\n// you can set the base URL for server-side via the method below or with \'process.env.BASE_URL\'\nSimpleIsoFetch.setBaseUrl(\'http://locahost\', 3000);\n\nsimpleIsoFetch = new SimpleIsoFetch(); // SimpleIsoFetch must be instantiated before use, this allows for cookie session handling in universal apps, discussed late\n\n// example usage for get request to \'http://locahost:3000\'\nsimpleIsoFetch.get({\n  route: \'/\'\n})\n.then(res => {\n  console.log(res); // => all html returned from \'http://locahost:3000\'\n});\n\n// identical to the above, convenience default for when no body/customization is needed (just uses string passed as route)\nsimpleIsoFetch.get(\'/\').then(res => {\n  console.log(res); // => all html returned from \'http://locahost:3000\'\n});\n```\n## A More Thorough Example\n```js\n// set to your app\'s hostname + port, (if hostname not provided, defaults to localhost, if hostname provided without port, 80 is assumed, if neither hostname nor port provided, http://localhost: + (process.env.PORT || 3000) used, function returns resulting base URL (note this is a static method, on class itself not instance)\nSimpleIsoFetch.setBaseUrl(\'http://localhost\', 3000);\n\n// normal usage\nconst aJsonObject = {\n  prop: \'example\'\n}\n\nconst exampleParam = \'paramparamparam\';\n\n// the below will make a POST request to:\n// \'http://localhost:3000/api/paramparamparam?prop=valvalval&prop2=anotherVal\'\nsimpleIsoFetch.post({\n  route: \'/api\',\n  params: exampleParam,\n  query: {\n    prop: \'valvalval\',\n    prop2: \'anotherVal\'\n  },\n  body: aJsonObject\n})\n.then(res => console.log(res)) // console.logs whatever the response is\n.catch(err => console.log(err)); // console.logs whatever the error is\n\n// there is flexibility built in to allow you to provide the route as the first argument and additional options as the second\n// the below will make a PUT request to:\n// \'http://localhost:3000/api/paramparamparam?prop=valvalval&prop2=anotherVal\'\nsimpleIsoFetch.put(\'/api\', {\n  params: exampleParam,\n  query: {\n    prop: \'valvalval\',\n    prop2: \'anotherVal\'\n  },\n  body: aJsonObject\n})\n.then(res => console.log(res)) // console.logs whatever the response is\n.catch(err => console.log(err)); // console.logs whatever the error is\n\n// the below will make a DELETE request to:\n// \'http://localhost:3000/api/paramparamparam?prop=valvalval&prop2=anotherVal\'\n// (note that DELETE and GET requests can\'t have a \'body\' property per W3C spec)\nsimpleIsoFetch.del({\n  route: \'/api\',\n  params: exampleParam,\n  query: {\n    prop: \'valvalval\',\n    prop2: \'anotherVal\'\n  }\n})\n.then(res => console.log(res)) // console.logs whatever the response is\n.catch(err => console.log(err)); // console.logs whatever the error is\n\n\n// full configurable options exposed below\n//// dummy body\nconst blogPost = {\n  title: \'Hey Guys\',\n  body: \'I\\\'m o simple!\'\n}\n\n//// dummy params\nconst id = \'1234\';\nconst location = \'place\';\n\n// the below will make a POST request to:\n// \'http://localhost:3000/api/posts/1234/place/?anAnalyticsThing={"aDeeplyNestedProperty":"example"}&anotherProperty=example2\'\nsimpleIsoFetch.makeRequest({\n  // instead of \'makeRequest method + \'method\' property you just use simpleFetch.<lowercase method> instead of\n  // simpleFetch.makeRequest for GET, PUT, and POST, DELETE uses the simpleFetch \'del\' method as \'delete\'\n  // is a reserved word.  The makeRequest method allows you to specify the method and therefore allows\n  // for less common methods.\n  method: \'post\',\n  route: \'/api/posts\',\n  params: [id, location],\n  query: {\n      anAnalyticsThing: {\n        // must be using bodyParser middleware with urlencoded method\'s extended property set to true\n        // for nested objects in \'query\' to work (it\'s the default but many examples set this to false):\n        // \'bodyParser.urlencoded();\' or \'bodyParser.urlencoded({ extended: true});\'\n        aDeeplyNestedProperty: \'example\'\n      },\n      anotherProperty: \'example2\'\n  },\n  body: blogPost,\n  headers: {\n    // note you should not set the \'Content-Type\' header yourself unless you really think you have to\n    // as this is being inferred for you by simple-iso-fetch\n    aHeadersProperty: \'value\'\n  },\n  // when \'includeCreds\' property is set to true, credentials will be included in the request no matter\n  // where the request is being made to, if this is set to false only \'same-origin\' (internal to app) requests\n  // will include credentials which means they\'ll never be included in requests coming from server until Node.js\n  // implements native Fetch API. \'credentials\' must be included for authentication\n  includeCreds: true,\n  // FOR ALL RESPONSE TYPES OTHER THAN ARRAYBUFFER YOU DON\'T NEED TO USE \'responseType\' PROPERTY AS TYPE WILL BE INFERRED.  \n  // For an \'arrayBuffer\' response this is needed however, as there\'s no way (that I\'ve found)\n  // to infer that a response is an arrayBuffer vs. a blob\n  responseType: \'arrayBuffer\'\n})\n.then(res => console.log(res)) // console.logs whatever the response is\n.catch(err => console.log(err)); // console.logs whatever the error is\n```\n\n## Binding/Unbinding Functions to Responses\n```js\nimport SimpleIsoFetch from \'simple-iso-fetch\';\n\n// set host to your app\'s hostname for server-side fetching\nSimpleIsoFetch.setBaseUrl(\'http://localhost:3000\');\n\n// make instance\nconst simpleIsoFetch = new SimpleIsoFetch();\n\n// bind function to error response, returns function to stop binding this function (useful for React\'s ComponentWillUnmount)\nconst unbindThisErrorFunction = simpleIsoFetch.bindToError(res => {\n  console.log(\'There was an error!\');\n});\n\n// unbinds the function that was bound above, so it will no longer get run upon error responses\nconst wasBound = unbindThisErrorFunction();\n\n// the unbinding function returns \'true\' if the function it tried to unbind was actually bound when it was called and \'false\' if it was not\nconsole.log(wasBound);\n\n\n// bind function to success response, returns function to unbind this function (useful for React\'s ComponentWillUnmount)\nconst unbindThisSuccessFunction = simpleIsoFetch.bindToSuccess(res => {\n  console.log(\'There was a successful response from a fetch!\');\n});\n\n// unbinds the function that was bound above, so it will no longer get run upon success responses\nconst wasBound = unbindThisErrorFunction();\n\n// the unbinding function returns \'true\' if the function it tried to unbind was actually bound when it was called and \'false\' if it was not\nconsole.log(wasBound);\n\n\n// bind function to all responses (success and error), returns function to unbind this function (useful for React\'s ComponentWillUnmount)\nconst unbindThisResponseFunction = simpleIsoFetch.bindToResponse(res => {\n  console.log(\'There was an error or successful response from a fetch!\');\n})\n\n// unbinds the function that was bound above, so it will no longer get run upon responses\nconst wasBound = unbindThisErrorFunction();\n\n// the unbinding function returns \'true\' if the function it tried to unbind was actually bound when it was called and \'false\' if it was not\nconsole.log(wasBound);\n\n\n// you can reference the arrays of bound functions with the below properties, note that if you modify these arrays directly and affect order or overwrite functions, your unbind functions will no longer work\nsimpleFetch.boundToError: [], // array of functions to be called upon error\nsimpleFetch.boundToSuccess: [], // array of functions to be called upon success responses\nsimpleFetch.boundToResponse: [], // array of functions to be called upon all responses\n```\n\n# Isomorphic (Universal) Redux use\nNot far into making this library I had to solve the problem of being able to pass an instance of "SimpleIsoFetch" throughout my redux application in order to put persist the authentication cookie for server side requests in a universal app.\n\nI provided a solution for this with using redux middleware and also provided a way to put the functions you have bound to API responses on your redux state and modify them with actions.\n\nNote that if you are not using redux or not making a universal app that has authentication, you can still use everything above this point and have a nifty fetching tool, but if you do need to handle the isomorphic redux thing, you\'re covered below :).\n\n```js\n// on your root universal route\napp.get(\'/*\', (req, res, next) => {\n    const simpleIsoFetch = new SimpleIsoFetch(req);\n    const store = configureStore(..., simpleIsoFetch, ...);\n    ...\n});\n```\n### Use with redux-thunk\nSince redux-thunk is very common for handling async requests with redux I have included middleware for this pattern, you can of course feel free to make your ownand just pass your \'simpleIsoFetchInstance\' into that.\n```js\n// in \'configureStore\' file/function\nimport thunk from \'redux-thunk\';\nimport { simpleIsoFetchThunk } from \'simple-iso-fetch\';\nimport rootReducer from \'../reducers\';\n\nexport function configureStore(..., simpleIsoFetchInstance, ...) {\n  const finalCreateStore = applyMiddleware(simpleIsoFetchThunk(simpleIsoFetchInstance), thunk, ...)(createStore);\n  const store = finalCreateStore(rootReducer, initialState);\n  return store\n}\n\n// Your async action creators will now be curried with \'simpleIsoFetch\' preceding \'dispatch\', see example async action creator below\n...\nexport function logIn(body) {\n  return simpleIsoFetch => dispatch =>\n    simpleIsoFetch.post({\n      route: \'/api/login\',\n      body\n    })\n    .then(({body: user}) =>\n      dispatch({\n        type: \'LOGIN_SUCCESS\',\n        user\n      })\n    .catch(error => {\n      dispatch({\n        type: \'LOGIN_FAIL\',\n        error\n      })\n    });\n}\n...\n```\n## Adding API response function bindings to Redux state\nIn order to still have functions bound to API responses on our instance and have those carried through our isomorphic app we need to place the arrays of bound functions (\'boundToError\', \'boundToSuccess\', and \'boundToResponse\') on our redux state and make them modifiable with actions, here\'s how we do it\n\n### Attach SimpleIsoFetch to Redux root Reducer\n```js\n/// in root reducer file\nimport { bindingsReducer } from simpleIsoFetch;\n...\n/// assuming you\'re using \'combineReducers\'\nexport default combineReducers({\n  ...\n  simpleIsoFetch: bindingsReducer  // simpleIsoFetch is expected name, can be modified\n})\n```\n### Initialization on Redux state\n```js\nimport SimpleIsoFetch, { syncBindingsWithStore } from \'../shared/lib/api\';\n\n// create simpleIsoFetch instance\nconst simpleIsoFetch = new SimpleIsoFetch();\n\n// configure store\nconst store = configureStore(..., simpleIsoFetch, ...);\n\n// feed store and instance into \'syncBindingsWithStore\' function to place \'boundToError\', \'boundToSuccess\', and \'boundToResponse\' arrays on state\nsyncBindingsWithStore(simpleIsoFetch, store);\n```\n### Binding functions to API responses\nHere is an example of how to send a \'react-toastr\' (http://tomchentw.github.io/react-toastr/) message upon error responses with a status code of 500 or greater\n```js\n// react-toastr library needs\nimport {\n  ToastContainer,\n  ToastMessage,\n} from \'react-toastr\';\nconst ToastMessageAnim = ToastMessage.animation;\n\n// used to create actions to bind functions to API call responses\nimport { bindToErrorAction, unbindFromErrorAction } from \'simple-iso-fetch\';\n\n\n@connect()\nexport default class App extends Component {\n  static propTypes = {\n    dispatch: PropTypes.func,\n    children: PropTypes.object.isRequired\n  }\n\n  componentDidMount() {\n    // function for creating toast errors upon responses with status of 500 or greater\n    this.errorToastFunc = (res) => {\n    res.status >= 500 &&\n    (res.body.errors || [{errorMessage: res.body}]).forEach(error =>\n      this.refs.container.error(\n        process.env.NODE_ENV === \'production\' ?\n        \'Sorry! ...please refresh the page\' :\n        `${error.errorCode || 500}: ${error.errorMessage} \\n ${res.method},${res.url}`,\n        `${res.body && res.body.status || res.status || 500} (internal)` || \'There was a server-side error\',\n        {closeButton: true}\n      ));\n    }\n\n    // transform response\n    this.props.dispatch(bindToErrorAction(this.errorToastFunc));\n  }\n\n  componentWillUnmount() {\n    // this is needed to avoid binding twice on hot reloading (good in principal regardless)\n    this.props.dispatch(unbindFromErrorAction(this.errorToastFunc));\n  }\n\n  render() {\n    return (\n      <div>\n        <ToastContainer\n          toastMessageFactory={props =>\n            <ToastMessageAnim {...props}\n              className=\'slide\'\n              transition=\'slide\'\n              timeOut={6000}/>}\n          ref=\'container\'\n          className=\'toast-top-right\'/>\n          {this.props.children}\n      </div>\n    );\n  }\n}\n```\n\n## License\n\n  [MIT](LICENSE)\n\n[nodei-image]: https://nodei.co/npm/simple-iso-fetch.png?downloads=true&downloadRank=true&stars=true\n[nodei-url]: https://www.npmjs.com/package/simple-iso-fetch\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '4b60af097064e143ff3847cc403ef139c4e3fb54',
21 silly publish   _id: 'simple-iso-fetch@2.0.5',
21 silly publish   _shasum: '8523704f010ceea78b4e74a786b482b4abb96668',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name simple-iso-fetch
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'simple-iso-fetch',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'simple-iso-fetch',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/simple-iso-fetch
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/rbeaman/.npm/simple-iso-fetch/2.0.5/package.tgz
30 verbose request uri https://registry.npmjs.org/simple-iso-fetch
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 7:55:54 PM
33 verbose request using bearer token for auth
34 verbose request id 3d0ba02e8e530570
35 http request PUT https://registry.npmjs.org/simple-iso-fetch
36 http 403 https://registry.npmjs.org/simple-iso-fetch
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Sun, 29 May 2016 23:55:56 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-jfk1033-JFK',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1464566155.726282,VS0,VE1193',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/rbeaman/.npm/registry.npmjs.org/simple-iso-fetch on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 2.0.5." : simple-iso-fetch
40 verbose stack     at makeError (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/request/request.js:199:22)
40 verbose stack     at emitTwo (events.js:106:13)
40 verbose stack     at Request.emit (events.js:191:7)
40 verbose stack     at Request.<anonymous> (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/request/request.js:1036:10)
40 verbose stack     at emitOne (events.js:101:20)
40 verbose stack     at Request.emit (events.js:188:7)
40 verbose stack     at IncomingMessage.<anonymous> (/Users/rbeaman/.nvm/versions/node/v6.0.0/lib/node_modules/npm/node_modules/request/request.js:963:12)
41 verbose statusCode 403
42 verbose pkgid simple-iso-fetch
43 verbose cwd /Users/rbeaman/projects/simple-iso-fetch
44 error Darwin 15.4.0
45 error argv "/Users/rbeaman/.nvm/versions/node/v6.0.0/bin/node" "/Users/rbeaman/.nvm/versions/node/v6.0.0/bin/npm" "publish"
46 error node v6.0.0
47 error npm  v3.8.6
48 error code E403
49 error "You cannot publish over the previously published version 2.0.5." : simple-iso-fetch
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
